apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# some metadata about the template itself
metadata:
  name: clastix-new-cluster
  title: Create New Clastix Cluster
  description: create new kubernetes cluster in Clastix environment
spec:
  owner: backstage/techdocs-core
  type: service

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Cluster Base Information
      required:
        - contract
        - apiserverip
        - clustername
        - clusterdomain
        - cpreplicas
        - datastore
        - k8sversion
        - gatewayip
      properties:
        contract:
          title: Nome del contratto
          type: string
          description: Nome del Contratto Cliente
        gatewayip:
          title: Cluster Node API server NAT
          type: string
          description: Cluster Node API server NAT
          pattern: '^((25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})$'
        apiserverip:
          title: Tenant API ip
          type: string
          description: Tenant Cluster Api Server IP
          pattern: '^((25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})$'
        clustername:
          title: Name
          type: string
          description: Cluster Unique Identifier (eg soris-stage)
        clusterdomain:
          title: Tenant Cluster Domain
          type: string
          description: Unique name of the component
        cpreplicas:
          title: Tenant Cluster Controlplane replicas
          type: integer
          description: Unique name of the component
          pattern: '^(3|5|7)$'
        datastore:
          title: Etcd Datastore
          type: string
          description: Unique name of the component
        k8sversion:
          title: Kubernetes Version
          type: string
          description: Unique name of the component
          pattern: '^1.(30|31|32)$'

    - title: vSphere vcenter connection
      required:
        - dcname
        - dcurl
        - dcthumbprint
        - dccredsecret
        - dcpool
        - dcfolder
        - dcstorage
        - dcvmtemplate
        - dcnetwork
      properties:
        dcname:
          title: Datacenter Name
          type: string
          description: Scegli l'ambiente di deploy
        dcurl:
          title: Datacenter URL
          type: string
          description: Scegli l'ambiente di deploy
        dcthumbprint:
          title: Datacenter Thumbprint
          type: string
          description: Scegli l'ambiente di deploy
        dccredsecret:
          title: Datacenter Credential Secret
          type: string
          description: Scegli l'ambiente di deploy
        dcfolder:
          title: Datacenter Node Folder
          type: string
          description: Scegli la folder di destinazione del nodo
        dcpool:
          title: Datacenter Node Resource Pool
          type: string
          description: Scegli il pool di destinazione del nodo
        dcstorage:
          title: Datacenter Node Storage Policy
          type: string
          description: Scegli la storage policy di destinazione del nodo
        dcvmtemplate:
          title: Datacenter Node VM Template
          type: string
          description: Scegli il template per la vm del nodo
        dcnetwork:
          title: Datacenter Node Network
          type: string
          description: Scegli la network per la vm del nodo

    - title: Get IPAM info
      required:
        - ipampool
      properties:
        ipampool:
          # range è una lista, posso avere range su reti diverse? Se sì, come specifico i gw?
          title: IPAM ranges
          type: array
          description: Required storage for db
          items:
            type: object
            required: [ipamname, prefix, gateway, rangestart, rangeend]
            properties:
              ipamname:
                title: Name
                type: string
                description: IPAM Provider Name
              prefix:
                title: Prefix
                type: integer
                description: IPAM Provier Prefix
              gateway:
                title: Gateway
                type: string
                description: IPAM Provider Gateway
              rangestart:
                type: string
                title: Range First Address
              rangeend:
                type: string
                title: Range Last Address

    - title: Get Nodes Info
      required:
        - nodesinfo
      properties:
        nodesinfo:
          title: Node Types and Info
          type: array
          description: Required storage for db
          items:
            type: object
            required: [nodename, replicas, cpu, mbram, gbdisk]
            properties:
              nodename:
                type: string
                title: Name
              replicas:
                type: integer
                title: Repliche
              cpu:
                type: integer
                title: Numero CPU
              mbram:
                type: integer
                title: Memory in MiB
              gbdisk:
                type: integer
                title: Disk Size
              labels:
                title: Nodes Labels
                type: array
                items:
                  type: object
                  required: [key, value]
                  properties:
                    key:
                      type: string
                      title: Key
                    value:
                      type: string
                      title: Value
              taints:
                title: Node Taints
                type: array
                items:
                  type: object
                  required: [key, value]
                  properties:
                    key:
                      type: string
                      title: Key
                    value:
                      type: string
                      title: Value

#    - title: Select Sveltos Apps
#      required:
#        - sveltosapps
#      properties:
#        sveltosapps:
#          type: array
#          items:
#            type: string
#          title: Applicazioni da installare
#          description: Seleziona una o più app

    - title: Choose a location
      required:
        - repoUrl
        - repotag
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
        repotag:
          title: Nome del nuovo tag
          type: string
          description: Il nome per il nuovo branch (es. feature/mio-componente).

  steps:
    - id: save-metadata
      name: Save Input Parameters
      action: fetch:template
      input: 
        url: ./template/clastix-values
        targetPath: ./output
        values:
          contract: ${{ parameters.contract }}
          apiserverip: ${{ parameters.apiserverip }}
          gatewayip: ${{ parameters.gatewayip }}
          clustername: ${{ parameters.clustername }}
          clusterdomain: ${{ parameters.clusterdomain }}
          cpreplicas: ${{ parameters.cpreplicas }}
          datastore: ${{ parameters.datastore }}
          k8sversion: ${{ parameters.k8sversion }}
          dcname: ${{ parameters.dcname }}
          dcurl: ${{ parameters.dcurl }}
          dcthumbprint: ${{ parameters.dcthumbprint }}
          dccredsecret: ${{ parameters.dccredsecret }}
          dcpool: ${{ parameters.dcpool }}
          dcfolder: ${{ parameters.dcfolder }}
          dcstorage: ${{ parameters.dcstorage }}
          dcnetwork: ${{ parameters.dcnetwork }}
          dcvmtemplate: ${{ parameters.dcvmtemplate }}
          ipampool: ${{ parameters.ipampool }}
          ipamrangeprefix: ${{ parameters.ipamrangeprefix }}
          ipamrangegw: ${{ parameters.ipamrangegw }}
          ipampoolname: ${{ parameters.ipampoolname }}
          nodesinfo: ${{ parameters.nodesinfo }}
          sveltosapps: ${{ parameters.sveltosapps }}
          repotag: ${{ parameters.repotag }}

    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./template/clastix-values
        targetPath: ./output
        values:
          apiserverip: ${{ parameters.apiserverip }}
          gatewayip: ${{ parameters.gatewayip }}
          clustername: ${{ parameters.clustername }}
          clusterdomain: ${{ parameters.clusterdomain }}
          cpreplicas: ${{ parameters.cpreplicas }}
          datastore: ${{ parameters.datastore }}
          k8sversion: ${{ parameters.k8sversion }}
          dcname: ${{ parameters.dcname }}
          dcurl: ${{ parameters.dcurl }}
          dcthumbprint: ${{ parameters.dcthumbprint }}
          dccredsecret: ${{ parameters.dccredsecret }}
          dcpool: ${{ parameters.dcpool }}
          dcfolder: ${{ parameters.dcfolder }}
          dcstorage: ${{ parameters.dcstorage }}
          dcnetwork: ${{ parameters.dcnetwork }}
          dcvmtemplate: ${{ parameters.dcvmtemplate }}
          ipampool: ${{ parameters.ipampool }}
          ipamrangeprefix: ${{ parameters.ipamrangeprefix }}
          ipamrangegw: ${{ parameters.ipamrangegw }}
          ipampoolname: ${{ parameters.ipampoolname }}
          nodesinfo: ${{ parameters.nodesinfo }}
          sveltosapps: ${{ parameters.sveltosapps }}

    - id: apri-pr
      name: Apri Pull Request
      action: github:createmerge
      input:
        repoUrl: ${{ parameters.repoUrl }}
        tagName: ${{ parameters.repotag }}
        title: 'feat: Aggiornamento dal template Backstage'
        description: 'Questa PR contiene gli aggiornamenti generati dal template.'
        sourcePath: ./repo-esistente
        commitMessage: 'pippo'
#
#    - id: register          
#      name: Registra il Componente
#      action: catalog:register
#      input:
#        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
#        catalogInfoPath: '/catalog-info.yaml'
