import React, { useState, useEffect } from 'react';
import { Content, Header, Page } from '@backstage/core-components';
import { useApi } from '@backstage/core-plugin-api';
import { scaffolderApiRef, ScaffolderApi } from '@backstage/plugin-scaffolder-react';
import { useNavigate, useParams } from 'react-router-dom';
import {
  Button,
  TextField,
  Grid,
  CircularProgress,
  Typography,
  Select,
  MenuItem,
  Tabs, 
  Tab, 
  Box 
} from '@material-ui/core';
import Form from '@rjsf/core';
import { JSONSchema7 } from 'json-schema';
import validator from '@rjsf/validator-ajv8';
import { withTheme } from '@rjsf/core';
import { Theme as MaterialUITheme } from '@rjsf/material-ui';

export const ExampleComponent = () => {
  const scaffolderApi = useApi(scaffolderApiRef);
  const navigate = useNavigate();

  const { entity, type } = useParams<{ entity: string, type: string }>();

  if (type != "clastix") {
    return <div>Type is not valid</div>;
  }
  
  const [name, setName] = useState('');
  const [cpu, setCpu] = useState('');
  const [memory, setMemory] = useState('');
  const [loading, setLoading] = useState(false);
  const [value, setValue] = useState('');
  const [loaded, setLoaded] = useState(false);

  const [tabIndex, setTabIndex] = useState(0);
  const [formData, setFormData] = useState({ contributors: [] });
  const Form = withTheme(MaterialUITheme);

  useEffect(() => {
    if (entity != "-") {
      fetch('http://localhost:7007/api/get-git-catalog/entity-yaml', {
        headers: {
          "Authorization": "Bearer 5H2TeAbPTxZx8Jz7svz95zz128XX2V3l",
  	  "X-Clastix-GitToken": "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",
      	  "X-Clastix-Repo": entity
        },
      })
        .then(res => {
          if (!res.ok) throw new Error(`HTTP error ${res.status}`);
          return res.json();
        })
        .then(data => {
          setName(data?.spec?.clustername || 'error');
	  setLoaded(true);
        })
        .catch(err => {
          console.log('Errore durante il fetch:', err);
        });
    } else {
      setLoaded(true)
    }
  }, []);

  const handleCreate = async () => {
    setLoading(true);
    try {
      const { taskId } = await scaffolderApi.scaffold({
        templateRef: 'template:default/example-nodejs-template',
        values: {
          name: 'nome',
	  sveltosapp: 'argocd,cert-manager',  
          repoUrl: 'github.com?owner=karavy&repo=deleteme',
        },
      });
      navigate(`/create/tasks/${taskId}`);
      console.log('pippo')
    } catch (err) {
      console.error('Errore nel lancio del template:', err);
      setLoading(false);
    }
  };

  if (!loaded) return <div>Loadingâ€¦</div>;

  const schema: JSONSchema7 = {
    type: 'object',
    properties: {
      contributors: {
        type: 'array',
        title: 'Collaboratori',
        items: {
          type: 'object',
          properties: {
            name: { type: 'string', title: 'Nome' },
            role: { type: 'string', title: 'Ruolo' },
          },
        },
      },
    },
  };

  const ArrayForm = () => {
  return(
    <Form
      schema={schema}
      formData={formData}
      validator={validator}
      onSubmit={({ formData }) => {
        console.log('Dati inviati:', formData);
      }}
    />
  );
  };

  const MainInfoTab = () => (
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="Nome applicazione"
              value={name}
              onChange={e => setName(e.target.value)}
            />
          </Grid>
          <Grid item xs={6}>
            <TextField
              fullWidth
              label="CPU"
              value={cpu}
              onChange={e => setCpu(e.target.value)}
              placeholder="es. 500m"
            />
          </Grid>
          <Grid item xs={6}>
            <TextField
              fullWidth
              label="Memoria"
              value={memory}
              onChange={e => setMemory(e.target.value)}
              placeholder="es. 512Mi"
            />
          </Grid>
	  <Grid item xs={12}>
	    <Select value={value} onChange={e => setValue(e.target.value)}>
	      <MenuItem value="option1">Opzione 1</MenuItem>
              <MenuItem value="option2">Opzione 2</MenuItem>
            </Select>
	  </Grid>
          <Grid item xs={12}>
            <Button
              variant="contained"
              color="primary"
              onClick={handleCreate}
              disabled={loading}
            >
              {loading ? <CircularProgress size={24} /> : 'Crea'}
            </Button>
          </Grid>
        </Grid>
  );

  return (
    <Page themeId="tool">
      <Header title="Crea una nuova applicazione" />
      <Content>
        <Box>
	  <Tabs 
	    value={tabIndex} 
	    onChange={(e, index) => {
	        setTabIndex(index)
		setFormData(e.formData)
	      }
	    } 
	  >
	    <Tab label="Overview" />
      	    <Tab label="My Tab" />
    	  </Tabs>
        </Box>
	<Box mt={2}>
            {tabIndex === 0 && <MainInfoTab />}
            {tabIndex === 1 && <ArrayForm />}
        </Box>
      </Content>
    </Page>
  );
};

